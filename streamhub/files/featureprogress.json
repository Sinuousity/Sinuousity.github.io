{
	"features": [
		{
			"name": "Hub Core",
			"desc": "The main components required to bring everything together.",
			"goals": [
				{
					"name": "Persistent Data Manager",
					"progress": 1.0,
					"comment": "Save and load user options and any other persistent data seamlessly"
				},
				{
					"name": "Notifications",
					"progress": 1.0,
					"deprecated": true,
					"comment": "Shows some text information at the top of the screen"
				},
				{
					"name": "Save Status Indicator",
					"progress": 1.0,
					"comment": "Shows at the top left corner any time a data save operation is triggered"
				},
				{
					"name": "Sub-Window Core",
					"progress": 1.0,
					"comment": "Flexible system of restoreable windows to be used by all aspects of the Hub"
				},
				{
					"name": "Draggable Sub-Windows",
					"progress": 1.0,
					"comment": "Windows you can drag and resize. Should stay on screen"
				},
				{
					"name": "Sub-Window Hotkeys",
					"progress": 1.0,
					"comment": "Use hotkeys to toggle viewing each kind of window"
				},
				{
					"name": "Debug Output Window",
					"progress": 1.0,
					"comment": "View output messages that can tell you about errors or important information"
				},
				{
					"name": "Global Tooltips",
					"progress": 1.0,
					"comment": "Custom tooltips for anything you hover your mouse over. Extra info for some items appears after a moment"
				},
				{
					"name": "Fetch and File Utilities",
					"progress": 1.0,
					"comment": "A set of methods for Hub features to use that make it easier to read / write files and get data from the web"
				},
				{
					"name": "Service Credentials Window",
					"progress": 1.0,
					"comment": "Manage your third-party service credentials.<br><span style='color:#ff8844'>Avoid opening this one while streaming!</span>"
				},
				{
					"name": "Feature Progress Window",
					"progress": 1.0,
					"comment": "You're looking at it!<br>Shows you what is done and what is not done"
				},
				{
					"name": "About Window",
					"progress": 1.0,
					"comment": "See information about this site and its creator!"
				},
				{
					"name": "First Time Tutorial",
					"progress": 0.0,
					"comment": "Will be useful getting account connections and settings configured how you need"
				}
			]
		},
		{
			"name": "MultiPlatform Users",
			"desc": "Introduces a unified identity per viewer, independent of their platform, and stores data for that viewer so we don't need to get it again.",
			"goals": [
				{
					"name": "MultiPlatform User Cache",
					"progress": 1.0,
					"comment": "Temporarily stores and re-uses viewer profile data like profile images and display names. Clears when you reload the page"
				},
				{
					"name": "MultiChat Window",
					"progress": 1.0,
					"comment": "One chat to rule them all! Combines messages from all sources. Send messages as your bot, too!"
				}
			]
		},
		{
			"name": "API Integration: Twitch",
			"desc": "Integrations with Twitch's chat and data APIs.",
			"goals": [
				{
					"name": "Chat: Read",
					"progress": 1.0,
					"comment": "Read chat messages coming in from Twitch"
				},
				{
					"name": "Chat: Write",
					"progress": 1.0,
					"comment": "Write chat messages back to Twitch"
				},
				{
					"name": "Profile Data",
					"progress": 1.0,
					"comment": "Gets profile data like display name and profile image URLs"
				}
			]
		},
		{
			"name": "API Integration: Kick",
			"desc": "Integrations with Kick's chat and data APIs.",
			"goals": [
				{
					"name": "Chat: Read",
					"progress": 1.0,
					"comment": "Read chat messages coming in from Kick"
				},
				{
					"name": "Chat: Write",
					"progress": 0.0,
					"blocked": true,
					"comment": "Write chat messages back to Kick.<br><span style='color:#ff4444;font-weight:bold;'>The Kick API Doesn't Support This Yet!</span>"
				},
				{
					"name": "Profile Data",
					"progress": 1.0,
					"comment": "Gets profile data like display name and profile image URLs"
				}
			]
		},
		{
			"name": "API Integration: StreamElements",
			"desc": "Integrations with StreamElements APIs.",
			"goals": [
				{
					"name": "Points",
					"progress": 1.0,
					"comment": "Fetch SteamElements Points balance info."
				},
				{
					"name": "Points Leaderboard",
					"progress": 1.0,
					"comment": "View the top 10 point holders."
				},
				{
					"name": "Points Purchasing",
					"progress": 1.0,
					"comment": "Viewers can use StreamElements Points as a currency to perform actions"
				},
				{
					"name": "Tips",
					"progress": 0.0,
					"comment": "Will trigger Hub events based when a StreamElements tip is received."
				},
				{
					"name": "Tips Leaderboard",
					"progress": 0.0,
					"comment": "Will allow you to see the top SE tip contributors."
				},
				{
					"name": "Contests",
					"progress": 0.0,
					"comment": "Will trigger events based on when a StreamElements contest begins or ends, based on who won."
				}
			]
		},
		{
			"name": "API Integration: OpenAI",
			"desc": "Integrations with OpenAI APIs.",
			"goals": [
				{
					"name": "Chat Summarization",
					"progress": 1.0,
					"comment": "Sends a specified number of messages to ChatGPT ( gpt-4o-mini ) to summarize."
				},
				{
					"name": "Summary Response",
					"progress": 1.0,
					"comment": "The generated summary is used to generate a chat message."
				},
				{
					"name": "Cost Estimation",
					"progress": 1.0,
					"comment": "Estimates the cost (very accurately) in USD according to the number of input and output tokens. This estimate uses values provided by OpenAI in their pricing information for the gpt-4o-mini model."
				},
				{
					"name": "Custom System Prompt",
					"progress": 1.0,
					"comment": "Enables you to customize how ChatGPT responds. Use this to avoid or focus on certain topics, give ChatGPT a personality, or provide more info about your stream and community."
				},
				{
					"name": "Mimic Chat Style",
					"progress": 1.0,
					"comment": "Asks ChatGPT to generate its response in a way that mimics the writing style of your chat."
				},
				{
					"name": "Chat Output",
					"progress": 1.0,
					"comment": "Actually sends the generated chat message to the chat."
				},
				{
					"name": "Auto-Reply To Mentions",
					"progress": 1.0,
					"comment": "Responds when other users use @ to mention your bot by username."
				},
				{
					"name": "Use Channel Stream Info",
					"progress": 1.0,
					"comment": "Fetches the current livestream info for your broadcast from Twitch, to give ChatGPT more context."
				}
			]
		},
		{
			"name": "API Integration: Extra Platforms",
			"desc": "Integrations with additional livestreaming / chat service APIs.",
			"goals": [
				{
					"name": "Facebook",
					"progress": 0.0,
					"comment": "Read chat messages coming in from Facebook.<br><span style='color:#ffcc44'>Planned but not any time soon!</span>"
				},
				{
					"name": "YouTube",
					"progress": 0.0,
					"comment": "Read chat messages coming in from YouTube.<br><span style='color:#ffcc44'>Planned but not any time soon!</span>"
				},
				{
					"name": "TikTok",
					"progress": 0.0,
					"comment": "Read chat messages coming in from TikTok.<br><span style='color:#ffcc44'>This one's a MAYBE</span>"
				}
			]
		},
		{
			"name": "Background Scene Editor",
			"desc": "A tool to create custom animated backgrounds using layers of CSS.",
			"goals": [
				{
					"name": "Core Layer Types",
					"progress": 1.0,
					"comment": "Solid Fill, Gradient Fill, Image"
				},
				{
					"name": "Layer Type: Pattern",
					"progress": 0.9,
					"comment": "Uses the 'background' CSS property to create repeating patterns with images or gradients. Currently has a time looping seam when using X Speed :/"
				},
				{
					"name": "Layer Type: Video",
					"progress": 1.0,
					"comment": "A video layer via URL. Example videos are Imgur URLs"
				},
				{
					"name": "Layer Type: Filter",
					"progress": 1.0,
					"comment": "A layer that changes layers below it. You can use any CSS filter function like 'blur()', 'hue-rotate()', or 'contrast()'"
				},
				{
					"name": "Layer Type: WebGL",
					"progress": 0.0,
					"comment": "A layer that will take advantage of custom GLSL shaders. Fancy stuff!"
				},
				{
					"name": "Layer Tools",
					"progress": 1.0,
					"comment": "Clone layers, move them up or down, delete layers, toggle layers on or off"
				},
				{
					"name": "Scene Profiles",
					"progress": 1.0,
					"comment": "Use profiles to store sets of layers for different scenes"
				},
				{
					"name": "Default / Preset Profiles",
					"progress": 1.0,
					"comment": "Includes default profiles and allows you to add a profile from presets"
				},
				{
					"name": "Save / Load Profiles As Files",
					"progress": 1.0,
					"comment": "Allows you to save and load scene profiles as JSON files"
				},
				{
					"name": "Global Variable List",
					"progress": 0.0,
					"comment": "Helpful list of built-in variables you can use in your scene layer CSS"
				},
				{
					"name": "CSS Tools",
					"progress": 0.0,
					"comment": "Some tools to avoid the need of writing CSS for the layer types that allow it"
				}
			]
		},
		{
			"name": "Raffle Overlay",
			"desc": "Spin to choose one winner from whoever joined via keyphrase in chat",
			"goals": [
				{
					"name": "Settings Window",
					"progress": 0.95,
					"comment": "Adds a new window with numerous settings. Controls section may not always be in sync"
				},
				{
					"name": "Infinite Slide Overlay",
					"progress": 1.0,
					"comment": "A slide of entries that never ends and can scroll either direction forever"
				},
				{
					"name": "Crazy Speed Visuals",
					"progress": 1.0,
					"comment": "Blur when fast"
				},
				{
					"name": "Profile Images",
					"progress": 1.0,
					"comment": "Use viewer profile pictures in the slide, no matter what platform they're tuning in from"
				},
				{
					"name": "Slide Transform Options",
					"progress": 1.0,
					"comment": "Allows you to change how entries move as they slide past"
				},
				{
					"name": "Keyphrase Detection Options",
					"progress": 1.0,
					"comment": "Adds options to customise keyphrase detection"
				},
				{
					"name": "Overlay Raffle Controls",
					"progress": 1.0,
					"comment": "Adds several in-context buttons to edit the raffle state and remove entries by hand"
				}
			]
		},
		{
			"name": "Viewer Inventories",
			"desc": "View and edit items in viewers' inventories.",
			"goals": [
				{
					"name": "Item Library Window",
					"progress": 1.0,
					"comment": "Allows you to create and edit any number of custom items for viewers to earn or collect"
				},
				{
					"name": "Viewer Inventory Viewer",
					"progress": 1.0,
					"comment": "See who has what and how much of it"
				},
				{
					"name": "Give Item Window",
					"progress": 1.0,
					"comment": "Manually give a specific item to a specific viewer"
				},
				{
					"name": "Random Item Rewards",
					"progress": 1.0,
					"comment": "Allows viewers to receive a random item from the Item Library as a reward"
				},
				{
					"name": "Custom Item Properties",
					"progress": 0.1,
					"comment": "Allows you to add custom properties to items, which could be used by other Hub features"
				},
				{
					"name": "Viewer Trading",
					"progress": 0,
					"comment": "Will allow viewers to initiate trades of items from their inventories"
				},
				{
					"name": "Viewer Crafting",
					"progress": 0,
					"comment": "Will allow viewers to craft new items by combining items from their inventories"
				},
				{
					"name": "Viewer Wallets",
					"progress": 0,
					"comment": "Holds any type of currency for each viewer, separate from the inventory and item systems"
				},
				{
					"name": "Viewer Wagering",
					"progress": 0,
					"comment": "Will allow viewers to place bets using currency, SE points, and maybe even items from their inventory"
				}
			]
		},
		{
			"name": "Creature Catching",
			"desc": "Creatures that you customise will appear and can be caught by chatters.",
			"goals": [
				{
					"name": "Creature Roster",
					"progress": 1.0,
					"comment": "Create, modify, and remove creatures."
				},
				{
					"name": "Creature Images",
					"progress": 1.0,
					"comment": "Allows creatures to use images from the web, including transparency"
				},
				{
					"name": "Creature Rarity",
					"progress": 1.0,
					"comment": "Allows some creatures to appear more frequently than others."
				},
				{
					"name": "Points Rewards",
					"progress": 1.0,
					"comment": "Allows StreamElements points to be rewarded when a creature is caught"
				},
				{
					"name": "Appearance Settings",
					"progress": 1.0,
					"comment": "Edit how frequently creatures appear"
				},
				{
					"name": "Appearance Overlay",
					"progress": 1.0,
					"comment": "Adds an image popup for creature appearances"
				},
				{
					"name": "Appearance Positioning",
					"progress": 0.0,
					"comment": "Will allow you to set which sides of the screen that creatures will appear on"
				},
				{
					"name": "Creature Idle Animation",
					"progress": 1.0,
					"comment": "Creatures do a little meandering during their appearances"
				},
				{
					"name": "Creature Animation Settings",
					"progress": 0.0,
					"comment": "Per-creature settings for how they animate during their appearances"
				},
				{
					"name": "Appearance Entry Animation",
					"progress": 0.0,
					"comment": "Will add an animation to show when a viewer has joined the catch event"
				},
				{
					"name": "Appearance Catch Animation",
					"progress": 0.0,
					"comment": "Will add an animation to show that the creature was caught"
				},
				{
					"name": "Output Event Messages",
					"progress": 1.0,
					"comment": "Sends chat messages as your bot, informing about creature events and outcomes"
				},
				{
					"name": "Improved Settings Window",
					"progress": 0.8,
					"comment": "View and manage various aspects of creature catching"
				}
			]
		},
		{
			"name": "Subathon Tools",
			"desc": "Initiate a subathon and configure community rewards that can be earned through contributions to extend the subathon",
			"goals": [
				{
					"name": "Timer Core",
					"progress": 0.15,
					"comment": "The core functionality for managing the timer"
				},
				{
					"name": "Subathon Rewards",
					"progress": 0.1,
					"comment": "Rewards the community can earn through contributions, like added time, time multipliers, and minigame plays"
				},
				{
					"name": "Wheel Spins",
					"progress": 0.0,
					"comment": "Can spin multiple wheels at once to randomly select rewards for community contributions"
				},
				{
					"name": "Plinko Drops",
					"progress": 0.0,
					"comment": "Can drop one or more plinko balls into a plinko board, which selects a reward based on the bins at the bottom"
				},
				{
					"name": ".txt Output Files",
					"progress": 0.0,
					"comment": "A number of .txt files created and updated by the Hub for use as text capture in your streaming software"
				}
			]
		},
		{
			"name": "Scratch Pad",
			"desc": "A tool for quickly drawing something, similar to Microsoft's Paint. Coming Eventually!",
			"goals": [
				{
					"name": "Simple Drawing Tools",
					"progress": 0.0,
					"comment": "Use a brush of adjustable size and softness to draw on a canvas in the color of your choice"
				},
				{
					"name": "Canvas Layers",
					"progress": 0.0,
					"comment": "Keep different parts of your artwork on their own layers"
				},
				{
					"name": "Filter Layers",
					"progress": 0.0,
					"comment": "A special kind of layer that affects the result of all layers below it"
				},
				{
					"name": "Layer Blending",
					"progress": 0.0,
					"comment": "Use different layer blending modes like Add, Overlay, Multiply, etc"
				},
				{
					"name": "Image Import",
					"progress": 0.0,
					"comment": "Import an image as a new layer"
				},
				{
					"name": "Image Export",
					"progress": 0.0,
					"comment": "Export your artwork as an image file"
				}
			]
		},
		{
			"name": "Suggestions Box",
			"desc": "A quick an easy way to submit suggestions, requests, bug reports, or a thank you",
			"goals": [
				{
					"name": "Suggestions Box Window",
					"progress": 0.0,
					"comment": "Submit a message directly to the Hub developer, me!"
				}
			]
		}
	]
}